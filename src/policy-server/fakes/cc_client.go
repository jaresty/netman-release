// This file was generated by counterfeiter
package fakes

import "sync"

type CCClient struct {
	GetAppGuidsStub        func(token string) (map[string]interface{}, error)
	getAppGuidsMutex       sync.RWMutex
	getAppGuidsArgsForCall []struct {
		token string
	}
	getAppGuidsReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CCClient) GetAppGuids(token string) (map[string]interface{}, error) {
	fake.getAppGuidsMutex.Lock()
	fake.getAppGuidsArgsForCall = append(fake.getAppGuidsArgsForCall, struct {
		token string
	}{token})
	fake.recordInvocation("GetAppGuids", []interface{}{token})
	fake.getAppGuidsMutex.Unlock()
	if fake.GetAppGuidsStub != nil {
		return fake.GetAppGuidsStub(token)
	} else {
		return fake.getAppGuidsReturns.result1, fake.getAppGuidsReturns.result2
	}
}

func (fake *CCClient) GetAppGuidsCallCount() int {
	fake.getAppGuidsMutex.RLock()
	defer fake.getAppGuidsMutex.RUnlock()
	return len(fake.getAppGuidsArgsForCall)
}

func (fake *CCClient) GetAppGuidsArgsForCall(i int) string {
	fake.getAppGuidsMutex.RLock()
	defer fake.getAppGuidsMutex.RUnlock()
	return fake.getAppGuidsArgsForCall[i].token
}

func (fake *CCClient) GetAppGuidsReturns(result1 map[string]interface{}, result2 error) {
	fake.GetAppGuidsStub = nil
	fake.getAppGuidsReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *CCClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAppGuidsMutex.RLock()
	defer fake.getAppGuidsMutex.RUnlock()
	return fake.invocations
}

func (fake *CCClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
